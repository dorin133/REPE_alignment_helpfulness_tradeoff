import matplotlib.pyplot as plt
import numpy as np

# mean:
international_law_mean = {-10.0: 335.51587, -9.5: 329.5834, -9.0: 323.038, -8.5: 315.30457, -8.0: 305.39688, -7.5: 291.6288, -7.0: 272.56387, -6.5: 249.15997, -6.0: 223.51788, -5.5: 198.36588, -5.0: 177.24493, -4.5: 159.08139, -4.0: 140.76688, -3.5: 121.52439, -3.0: 102.0401, -2.5: 83.51287, -2.0: 66.02146, -1.5: 49.28334, -1.0: 32.85365, -0.5: 16.563301, 0.0: 0.0, 0.5: 17.015583, 1.0: 34.572395, 1.5: 52.641922, 2.0: 71.401146, 2.5: 91.618935, 3.0: 113.96883, 3.5: 139.32022, 4.0: 167.86406, 4.5: 199.00337, 5.0: 227.60503, 5.5: 249.34381, 6.0: 266.21838, 6.5: 280.55026, 7.0: 293.0112, 7.5: 303.59097, 8.0: 312.33032, 8.5: 320.6868, 9.0: 332.2292, 9.5: 351.75513, 10.0: 379.10785}


# std:
international_law_std = {-10.0: 17.069365, -9.5: 18.261847, -9.0: 19.518072, -8.5: 20.593138, -8.0: 23.145777, -7.5: 23.105663, -7.0: 15.374612, -6.5: 15.987792, -6.0: 13.304593, -5.5: 13.076049, -5.0: 14.0325365, -4.5: 14.388947, -4.0: 13.9468, -3.5: 12.54152, -3.0: 10.986491, -2.5: 9.6567955, -2.0: 8.350269, -1.5: 6.7980638, -1.0: 4.945771, -0.5: 2.684365, 0.0: 0.0, 0.5: 3.0129619, 1.0: 5.849365, 1.5: 8.121459, 2.0: 10.0336075, 2.5: 11.970746, 3.0: 13.650926, 3.5: 14.823819, 4.0: 15.302408, 4.5: 15.548838, 5.0: 14.620605, 5.5: 13.68399, 6.0: 14.134894, 6.5: 14.135312, 7.0: 13.82482, 7.5: 13.473, 8.0: 13.735747, 8.5: 14.298523, 9.0: 15.280462, 9.5: 16.215998, 10.0: 17.172077}

# mean:
high_school_computer_science_mean = {-10.0: 382.5333, -9.5: 378.4088, -9.0: 374.3241, -8.5: 365.91168, -8.0: 347.7725, -7.5: 324.20325, -7.0: 306.61374, -6.5: 287.46118, -6.0: 263.13348, -5.5: 240.4169, -5.0: 219.29669, -4.5: 198.88568, -4.0: 179.65987, -3.5: 159.82954, -3.0: 139.08867, -2.5: 117.79939, -2.0: 95.95637, -1.5: 73.21906, -1.0: 49.611855, -0.5: 25.223555, 0.0: 0.0, 0.5: 25.848728, 1.0: 52.1456, 1.5: 78.777985, 2.0: 105.56389, 2.5: 132.86383, 3.0: 161.3493, 3.5: 190.75444, 4.0: 218.98805, 4.5: 243.71646, 5.0: 265.10327, 5.5: 283.8136, 6.0: 298.7408, 6.5: 309.75543, 7.0: 320.26917, 7.5: 333.117, 8.0: 347.2896, 8.5: 361.41812, 9.0: 374.37668, 9.5: 384.09845, 10.0: 390.19992}

# std:
high_school_computer_science_std = {-10.0: 17.453106, -9.5: 17.643366, -9.0: 18.594954, -8.5: 19.095556, -8.0: 18.164274, -7.5: 15.576602, -7.0: 14.813436, -6.5: 17.690048, -6.0: 17.35897, -5.5: 15.66671, -5.0: 15.203984, -4.5: 14.661596, -4.0: 15.319083, -3.5: 14.84533, -3.0: 13.097858, -2.5: 10.958983, -2.0: 8.876981, -1.5: 6.711258, -1.0: 4.5125785, -0.5: 2.3243313, 0.0: 0.0, 0.5: 2.5118806, 1.0: 5.3823705, 1.5: 8.626386, 2.0: 12.094389, 2.5: 15.5704565, 3.0: 18.414398, 3.5: 20.367489, 4.0: 21.527637, 4.5: 21.614782, 5.0: 20.715322, 5.5: 19.526093, 6.0: 18.332075, 6.5: 16.570011, 7.0: 15.079865, 7.5: 13.740547, 8.0: 13.165038, 8.5: 13.553405, 9.0: 13.154118, 9.5: 12.73449, 10.0: 12.489068}

#mean:
medical_genetics_mean = {-10.0: 393.24902, -9.5: 389.14233, -9.0: 384.00708, -8.5: 372.49963, -8.0: 350.08987, -7.5: 324.97137, -7.0: 305.68884, -6.5: 282.49353, -6.0: 259.66364, -5.5: 242.77818, -5.0: 227.7057, -4.5: 210.3323, -4.0: 190.54926, -3.5: 169.89111, -3.0: 148.88797, -2.5: 127.38754, -2.0: 104.94443, -1.5: 80.94555, -1.0: 55.24024, -0.5: 28.06834, 0.0: 0.0, 0.5: 27.821672, 1.0: 54.150826, 1.5: 78.36202, 2.0: 101.014786, 2.5: 123.72385, 3.0: 147.60237, 3.5: 172.48126, 4.0: 197.40681, 4.5: 221.48619, 5.0: 243.46825, 5.5: 263.69055, 6.0: 280.4219, 6.5: 292.78076, 7.0: 306.42728, 7.5: 326.0477, 8.0: 349.56125, 8.5: 369.5234, 9.0: 382.25897, 9.5: 388.62537, 10.0: 390.69138}

# std:
medical_genetics_std = {-10.0: 14.156667, -9.5: 15.244696, -9.0: 17.581266, -8.5: 19.743868, -8.0: 19.173807, -7.5: 15.289708, -7.0: 13.454663, -6.5: 14.708196, -6.0: 16.164778, -5.5: 16.60352, -5.0: 16.823702, -4.5: 16.297623, -4.0: 15.259047, -3.5: 13.722379, -3.0: 12.159333, -2.5: 10.941333, -2.0: 9.78567, -1.5: 8.149339, -1.0: 5.8242946, -0.5: 2.9500794, 0.0: 0.0, 0.5: 2.712851, 1.0: 4.9259663, 1.5: 6.5558596, 2.0: 8.18591, 2.5: 10.586781, 3.0: 13.360885, 3.5: 15.087232, 4.0: 14.841161, 4.5: 13.469291, 5.0: 12.381471, 5.5: 12.784892, 6.0: 13.345828, 6.5: 13.389387, 7.0: 14.237216, 7.5: 16.48538, 8.0: 19.368652, 8.5: 20.500376, 9.0: 19.823713, 9.5: 18.275679, 10.0: 16.526356}


def plot_dataset_results(dataset_name, mean, std, color='blue'):
    # mean = {-k: v for k, v in mean.items()}
    # std = {-k: v for k, v in std.items()}
    # mean = dict(sorted(mean.items()))
    # std = dict(sorted(std.items()))
    print('dataset_name:', dataset_name)
    print('mean:', mean)
    print('std:', std)
    print('________')
    x = list(mean.keys())
    y = list(mean.values())
    yerr = list(std.values())

    plt.errorbar(x, y, yerr=yerr, label=dataset_name, color=color)

    # Fit a line to the data
    index_of_zero = x.index(0)
    x_p, y_p = x[index_of_zero:], y[index_of_zero:]
    index_of_5 = x_p.index(5)
    coefficients_p = np.polyfit(x_p[:index_of_5+1], y_p[:index_of_5+1], 1)
    fit_function_p = np.poly1d(coefficients_p)
    x_n, y_n = x[:index_of_zero+1], y[:index_of_zero+1]
    index_of_minus_5 = x_n.index(-5)
    coefficients_n = np.polyfit(x_n[index_of_minus_5:], y_n[index_of_minus_5:], 1)
    fit_function_n = np.poly1d(coefficients_n)

    # Plot the fitted line
    plt.plot(x_p, fit_function_p(x_p), '--', label=f'{dataset_name} fit', color='black')
    plt.plot(x_n, fit_function_n(x_n), '--', label=f'{dataset_name} fit', color='black')

    equation_p = f'y_pos = {fit_function_p[1]:.2f}x + {fit_function_p[0]:.2f}'
    equation_n = f'y_neg = {fit_function_n[1]:.2f}x + {fit_function_n[0]:.2f}'

    equation = equation_p + '\n' + equation_n

    plt.annotate(equation, xy=(0.75, 0.15), xycoords='axes fraction', fontsize=12, color=color)

    plt.title(f'final layer representation change norm of llama-2-13b. Dataset: {dataset_name}')
    plt.xlabel(r'$r_e$')
    plt.ylabel(r'$|U\cdot \delta_{r_e}(q)|$')
    plt.show()


plot_dataset_results('international_law', international_law_mean, international_law_std, color='b')
plot_dataset_results('high_school_computer_science', high_school_computer_science_mean, high_school_computer_science_std, color='r')
plot_dataset_results('medical_genetics', medical_genetics_mean, medical_genetics_std, color='y')
